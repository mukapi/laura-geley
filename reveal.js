// üéØ GSAP ScrollTrigger Reveal - Compatible Barba.js + Lenis
(function () {
  "use strict";

  // V√©rifier que GSAP et ScrollTrigger sont charg√©s
  if (typeof gsap === "undefined" || typeof ScrollTrigger === "undefined") {
    console.error("‚ùå GSAP ou ScrollTrigger non trouv√©");
    return;
  }

  // Enregistrer ScrollTrigger
  gsap.registerPlugin(ScrollTrigger);

  // üî• Configuration globale de ScrollTrigger pour Lenis (une seule fois)
  let lenisIntegrated = false;

  function integrateLenis() {
    if (lenisIntegrated || !window.lenis) return;

    console.log("üîó Int√©gration Lenis + ScrollTrigger");

    // ‚ö†Ô∏è IMPORTANT : Lenis utilise autoRaf: true dans barba.js
    // On doit SEULEMENT lier le scroll √† ScrollTrigger, PAS le ticker !
    let scrollEventCount = 0;
    window.lenis.on("scroll", (e) => {
      ScrollTrigger.update();
      // Log les 3 premiers √©v√©nements de scroll pour v√©rifier
      if (scrollEventCount < 3) {
        console.log(
          `üåä Lenis scroll event ${scrollEventCount + 1}:`,
          e.scroll.toFixed(0)
        );
        scrollEventCount++;
      }
    });

    // Forcer ScrollTrigger √† bien √©couter le scroll
    ScrollTrigger.defaults({
      scroller: document.documentElement,
    });

    lenisIntegrated = true;
  }

  // 1Ô∏è‚É£ FONCTION PRINCIPALE D'INITIALISATION
  window.initRevealAnimations = function () {
    console.log("üéØ initRevealAnimations called");

    // Int√©grer Lenis si pas encore fait
    integrateLenis();

    // Kill toutes les anciennes instances ScrollTrigger de ce script
    const oldTriggers = ScrollTrigger.getAll().filter(
      (st) => st.vars && st.vars.id && st.vars.id.startsWith("reveal-")
    );
    console.log(
      `üóëÔ∏è Suppression de ${oldTriggers.length} anciens ScrollTriggers`
    );
    oldTriggers.forEach((st) => st.kill());

    // S√©lectionner tous les √©l√©ments avec l'attribut data-reveal
    const revealElements = document.querySelectorAll("[data-reveal]");

    if (revealElements.length === 0) {
      console.log("‚ÑπÔ∏è Aucun √©l√©ment [data-reveal] trouv√©");
      return;
    }

    console.log(`‚úÖ ${revealElements.length} √©l√©ments [data-reveal] trouv√©s`);

    revealElements.forEach((element, index) => {
      // √âtat initial : toujours invisible au d√©part
      gsap.set(element, {
        opacity: 0,
        y: 50,
      });

      // Animation d'apparition avec ScrollTrigger
      const animation = gsap.to(element, {
        opacity: 1,
        y: 0,
        duration: 0.8,
        ease: "power2.out",
        paused: true, // On d√©marre en pause
      });

      // ScrollTrigger qui lance l'animation
      const st = ScrollTrigger.create({
        id: `reveal-${index}`,
        trigger: element,
        start: "top 85%",
        onEnter: () => {
          console.log(`üé¨ Animation reveal-${index} d√©clench√©e`);
          animation.play();
        },
        onUpdate: (self) => {
          // Log uniquement la premi√®re fois pour debug
          if (!element.dataset.stDebug) {
            console.log(
              `üìä reveal-${index} progress: ${self.progress.toFixed(
                2
              )}, isActive: ${self.isActive}`
            );
            element.dataset.stDebug = "true";
          }
        },
        once: true,
        markers: false, // Mettre true pour voir les markers
      });

      console.log(
        `üìç ScrollTrigger cr√©√© pour reveal-${index}, start: ${st.start}`
      );
    });

    // Rafra√Æchir ScrollTrigger apr√®s cr√©ation
    console.log("üîÑ Refresh ScrollTrigger...");
    ScrollTrigger.refresh();

    // Multiple refresh pour √™tre s√ªr que tout est synchro (important avec Lenis + Barba)
    setTimeout(() => {
      ScrollTrigger.refresh();
      console.log("üîÑ Refresh 2/3");
    }, 100);

    setTimeout(() => {
      ScrollTrigger.refresh();
      console.log("üîÑ Refresh 3/3");
    }, 300);

    setTimeout(() => {
      console.log("‚úÖ Reveal animations pr√™tes");
      // Log final de debug : position de tous les triggers
      const allTriggers = ScrollTrigger.getAll();
      console.log(`üìä Total ScrollTriggers actifs: ${allTriggers.length}`);
      
      // üî• FIX CRITIQUE : Forcer le d√©clenchement des √©l√©ments d√©j√† dans leur zone
      allTriggers.forEach((st, i) => {
        if (st.vars && st.vars.id && st.vars.id.startsWith("reveal-")) {
          console.log(
            `  - ${st.vars.id}: start=${st.start}, end=${st.end}, trigger=${
              st.trigger ? "OK" : "MISSING"
            }`
          );
          
          // V√©rifier si le trigger est d√©j√† d√©pass√© (√©l√©ment d√©j√† visible)
          const currentScroll = window.pageYOffset || document.documentElement.scrollTop;
          const triggerStart = st.start;
          
          if (currentScroll >= triggerStart && !st.triggered) {
            console.log(`‚ö° ${st.vars.id} d√©j√† visible, d√©clenchement forc√©!`);
            st.triggered = true;
            // D√©clencher le callback onEnter manuellement
            if (st.vars.onEnter) {
              st.vars.onEnter(st);
            }
          }
        }
      });
    }, 500);
  };

  // 2Ô∏è‚É£ INITIALISATION AU CHARGEMENT DE PAGE (FALLBACK)
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      setTimeout(() => {
        if (typeof window.initRevealAnimations === "function") {
          window.initRevealAnimations();
        }
      }, 200);
    });
  } else {
    setTimeout(() => {
      if (typeof window.initRevealAnimations === "function") {
        window.initRevealAnimations();
      }
    }, 200);
  }

  // 3Ô∏è‚É£ AUTO-D√âTECTION ET CONNEXION √Ä BARBA.JS
  setTimeout(() => {
    if (typeof barba !== "undefined") {
      console.log("üîÑ reveal.js - Barba detected, setting up hooks");
      barba.hooks.afterEnter((data) => {
        setTimeout(() => {
          if (typeof window.initRevealAnimations === "function") {
            window.initRevealAnimations();
          }
        }, 100);
      });
    }
  }, 500);
})();
